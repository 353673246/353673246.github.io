{"version":3,"sources":["components/me/me.jsx","App.js","serviceWorker.js","index.js"],"names":["Me","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","ava","nickname","msg","data","getUserInfo","$","ajax","method","url","success","res","headimgurl","setState","error","console","log","_this$state","react_default","a","createElement","className","src","alt","width","height","React","Component","App","react_router_dom","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8VA2DeA,cAtDX,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACTC,IAAM,GACNC,SAAW,GACXC,IAAI,GACJC,KAAK,IANKX,mFAYdG,KAAKS,oDAKL,IAAIZ,EAAQG,KAEZU,IAAEC,KAAK,CACHC,OAAO,MACPC,IAHM,qNAINC,QAHG,SAGKC,GACJ,IAAIT,EAAWS,EAAIT,SACfD,EAAMU,EAAIC,WACdnB,EAAMoB,SAAS,CACXX,SAAWA,EACXD,IAAMA,EACNE,IAAI,uCACJC,KAAKO,KAEXG,MAZC,SAYKH,GACJI,QAAQC,IAAIL,GACZlB,EAAMoB,SAAS,CACXV,IAAI,6EAMZ,IAAAc,EAC4BrB,KAAKI,MAA9BE,EADHe,EACGf,SAASD,EADZgB,EACYhB,IAAIE,EADhBc,EACgBd,IAAIC,EADpBa,EACoBb,KACxB,OACIc,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAEXH,EAAAC,EAAAC,cAAA,UAAKjB,GACLe,EAAAC,EAAAC,cAAA,UAAKhB,GACLc,EAAAC,EAAAC,cAAA,UAAKlB,GACLgB,EAAAC,EAAAC,cAAA,OAAKE,IAAKrB,EAAKsB,IAAI,GAAGC,MAAM,OAAOC,OAAO,iBAjDzCC,IAAMC,WCeRC,mLAVX,OACEV,EAAAC,EAAAC,cAACS,EAAA,EAAD,KACEX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW1C,aALzBoC,aCKEO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtB,EAAAC,EAAAC,cAACqB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.db09b131.chunk.js","sourcesContent":["import React from 'react'\nimport './me.scss'\nimport $ from 'jquery'\n\nclass Me extends React.Component{\n    constructor(props){\n        super(props)\n        this.state = {\n            ava : '',\n            nickname : '',\n            msg:'',\n            data:''\n        }\n    }\n\n    \n    componentDidMount(){\n        this.getUserInfo()\n    }\n\n    // 获取用户信息\n    getUserInfo(){\n        var _this = this\n        var url = 'https://open.weixin.qq.com/connect/oauth2/authorize?appid=wx424b3ab946fd8b61&redirect_uri=https://xc.muho.tv/wf/getWXFUserinfo&response_type=code&scope=snsapi_base&state=STATE&connect_redirect=1#wechat_redirect'\n        $.ajax({\n            method:'GET',\n            url:url,\n            success(res){\n                var nickname = res.nickname\n                var ava = res.headimgurl\n                _this.setState({\n                    nickname : nickname,\n                    ava : ava,\n                    msg:'获取数据成功',\n                    data:res\n                })\n            },error(res){\n                console.log(res)\n                _this.setState({\n                    msg:'获取数据失败'\n                })\n            }\n        })\n    }\n\n    render(){\n        const {nickname,ava,msg,data} = this.state\n        return(\n            <div className=\"me_Container\">\n                {/* <h1>个人页面</h1> */}\n                <h1>{msg}</h1>\n                <h1>{data}</h1>\n                <h1>{nickname}</h1>\n                <img src={ava} alt=\"\" width=\"100%\" height=\"100%\"/>\n            </div>\n        )\n    }\n}\n\nexport default Me","import React, { Component } from 'react';\nimport {HashRouter  as Router , Route} from 'react-router-dom'\nimport './App.css';\nimport './base.scss'\n\nimport Me from './components/me/me'\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <Route exact path=\"/\" component={Me}></Route>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}